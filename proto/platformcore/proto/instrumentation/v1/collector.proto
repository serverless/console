syntax = "proto3";

package platformcore.proto.instrumentation.v1;

import "platformcore/proto/instrumentation/v1/metric.proto";
import "platformcore/proto/instrumentation/v1/trace.proto";
import "platformcore/proto/instrumentation/v1/log.proto";

// AnyInstrumentationPayload is used to represent any type of instrumentation payload.
message AnyInstrumentationPayload {
    oneof value {
        platformcore.proto.instrumentation.v1.MetricPayload metric_payload = 1;
        platformcore.proto.instrumentation.v1.TracePayload trace_payload = 2;
        platformcore.proto.instrumentation.v1.LogPayload log_payload = 3;
    }
}

// CollectorPayload is used as a container type for sending instrumentation payloads to instrumentation.
// Its only field, payloads, is an array containing any number and any combination of metric, trace, and log payloads.
message CollectorPayload {
    repeated AnyInstrumentationPayload payloads = 1;
}

message SendPayloadRequest {
    CollectorPayload payload = 1;
}

message SendPayloadResponse {
    bool accepted = 1;
}

service CollectorService {
    rpc SendPayload(SendPayloadRequest) returns (SendPayloadResponse) {}
}